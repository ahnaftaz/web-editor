{"version":3,"sources":["plugins/module-request-plugin.ts","components/base-output.tsx","index.tsx","plugins/path-resolution-plugin.ts"],"names":["localCache","localforage","createInstance","name","moduleRequestPlugin","input","setup","build","onLoad","filter","loader","contents","args","getItem","path","cachedResult","axios","get","data","request","cleanedData","replace","result","resolveDir","URL","responseURL","pathname","setItem","baseHTML","App","iframe","useRef","useState","mainBuildService","setBuildService","setInput","useEffect","startService","esbuild","worker","wasmURL","service","initiateTranspiling","current","contentWindow","srcdoc","entryPoints","bundle","write","plugins","onResolve","namespace","href","define","postMessage","outputFiles","text","className","theme","height","defaultLanguage","defaultValue","options","wordWrap","minimap","enabled","lineNumbersMinChars","folding","fontSize","automaticLayout","onChange","value","onMount","monaco","getModel","updateOptions","tabSize","onClick","width","ref","title","sandbox","srcDoc","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.d318144b.chunk.js","sourcesContent":["import * as esbuild from 'esbuild-wasm';\nimport axios from 'axios';\nimport localforage from 'localforage';\n\nconst localCache = localforage.createInstance({\n  name: 'filecache',\n});\n\nexport const moduleRequestPlugin = (input: string) => {\n  return {\n    name: 'fetch-plugin',\n    setup(build: esbuild.PluginBuild) {\n      build.onLoad({ filter: /(^index\\.js$)/ }, () => {\n        return {\n          loader: 'jsx',\n          contents: input,\n        };\n      });\n\n      build.onLoad({ filter: /.*/ }, async (args: any) => {\n        // Return item without request if already present in cache\n        const cachedResult = await localCache.getItem<esbuild.OnLoadResult>(\n          args.path\n        );\n        if (cachedResult) {\n          return cachedResult;\n        }\n      });\n\n      build.onLoad({ filter: /.css$/ }, async (args: any) => {\n        // Return new object containing path to follow for onload process\n        const { data, request } = await axios.get(args.path);\n\n        const cleanedData = data\n          .replace(/\\n/g, '')\n          .replace(/\"/g, '\\\\\"')\n          .replace(/'/g, \"\\\\'\");\n        const contents = `\n          const style = document.createElement('style');\n          style.innerText = '${cleanedData}';\n          document.head.appendChild(style);\n        `;\n\n        const result: esbuild.OnLoadResult = {\n          loader: 'jsx',\n          contents,\n          resolveDir: new URL('./', request.responseURL).pathname,\n        };\n        await localCache.setItem(args.path, result);\n\n        return result;\n      });\n\n      build.onLoad({ filter: /.*/ }, async (args: any) => {\n        // Return new object containing path to follow for onload process\n        const { data, request } = await axios.get(args.path);\n    \n        const result: esbuild.OnLoadResult = {\n          loader: 'jsx',\n          contents: data,\n          resolveDir: new URL('./', request.responseURL).pathname,\n        };\n        await localCache.setItem(args.path, result);\n\n        return result;\n      });\n    },\n  };\n};\n","const baseHTML = `\n<html>\n  <head></head>\n  <body>\n    <div id=\"root\"></div>\n    <script>\n      window.addEventListener('message', (e) => {\n        try{\n          eval(e.data);\n        } catch (err) {\n          const root = document.querySelector('#root');\n          root.innerHTML = '<h2 style=\"color:orange\">Runtime Error!</h2><div>' + err + '</div>';\n        }\n      }, false);\n    </script>\n  </body>\n</html>\n`;\n\nexport default baseHTML;\n","import * as esbuild from 'esbuild-wasm';\nimport { useState, useEffect, useRef } from 'react';\nimport ReactDOM from 'react-dom';\nimport { pathResolvePlugin } from './plugins/path-resolution-plugin';\nimport { moduleRequestPlugin } from './plugins/module-request-plugin';\nimport MonacoEditor, { OnChange, OnMount } from '@monaco-editor/react';\nimport baseHTML from './components/base-output';\nimport 'bulmaswatch/cyborg/bulmaswatch.min.css';\n\nconst App = () => {\n  const iframe = useRef<HTMLIFrameElement>(null);\n  // const highlighter = useRef<any>(null);\n  const [mainBuildService, setBuildService] = useState<esbuild.Service>();\n  const [input, setInput] = useState('');\n\n  // Prepares app for processing transpile requests\n  useEffect(() => {\n    startService();\n  }, []);\n\n  // async start of webapp and assign to ref to avoid restarts\n  const startService = async () => {\n    // esbuild binary (web assembly) located in public folder\n    // of app to run directly on browser\n    const service = await esbuild.startService({\n      worker: true,\n      wasmURL: 'https://unpkg.com/esbuild-wasm@0.8.27/esbuild.wasm',\n    });\n    setBuildService(service);\n  };\n\n  const handleEditorChange: OnChange = (value) => {\n    if (!value) {\n      return;\n    }\n    setInput(value);\n  };\n  const handleMount: OnMount = (monaco) => {\n    monaco.getModel()?.updateOptions({ tabSize: 2 });\n  };\n\n  // Assigned to button to send a service req to esbuild\n  const initiateTranspiling = async () => {\n    if (!mainBuildService || !iframe.current || !iframe.current.contentWindow) {\n      return;\n    }\n\n    // reset the iframe window before each code run to remove any changes to page\n    iframe.current.srcdoc = baseHTML;\n\n    // begin building file with all modules using custom plugins\n    const result = await mainBuildService.build({\n      entryPoints: ['index.js'],\n      bundle: true,\n      write: false,\n      // plugin to handle path resolution and api request\n      plugins: [pathResolvePlugin(), moduleRequestPlugin(input)],\n      define: { 'process.env.NODE_ENV': '\"production\"' },\n    });\n\n    // communicating all code through messages to maintain no relation between parent child\n    iframe.current.contentWindow.postMessage(result.outputFiles[0].text, '*');\n  };\n\n  return (\n    <div className='columns'>\n      <div className='column'>\n        <h1 className='title is-3'>Online Js editor</h1>\n        <MonacoEditor\n          theme='vs-dark'\n          height='300px'\n          defaultLanguage='javascript'\n          defaultValue='/* Use \"print()\" to show items in the result widow */'\n          options={{\n            wordWrap: 'on',\n            minimap: { enabled: false },\n            lineNumbersMinChars: 3,\n            folding: false,\n            fontSize: 16,\n            automaticLayout: true,\n          }}\n          onChange={handleEditorChange}\n          onMount={handleMount}\n        />\n        <button className='button is-primary' onClick={initiateTranspiling}>\n          Transpile!\n        </button>\n      </div>\n      <div className='column box'>\n        <iframe\n          width={'500px'}\n          ref={iframe}\n          title='code-result'\n          sandbox='allow-scripts'\n          srcDoc={baseHTML}\n        />\n      </div>\n    </div>\n  );\n};\n\nReactDOM.render(<App />, document.querySelector('#root'));\n","import * as esbuild from 'esbuild-wasm';\n\nexport const pathResolvePlugin = () => {\n  return {\n    name: 'unpkg-path-plugin',\n    setup(build: esbuild.PluginBuild) {\n      // Building with only local code with no importing\n      build.onResolve({ filter: /(^index\\.js$)/ }, () => {\n        return { path: 'index.js', namespace: 'a' };\n      });\n\n      // Building with package that is build on other packages\n      build.onResolve({ filter: /^\\.+\\// }, (args: any) => {\n        return {\n          namespace: 'a',\n          path: new URL(args.path, 'https://unpkg.com' + args.resolveDir + '/')\n            .href,\n        };\n      });\n\n      // Base case package import\n      build.onResolve({ filter: /.*/ }, async (args: any) => {\n        return {\n          namespace: 'a',\n          path: `https://unpkg.com/${args.path}`,\n        };\n      });\n    },\n  };\n};\n"],"sourceRoot":""}